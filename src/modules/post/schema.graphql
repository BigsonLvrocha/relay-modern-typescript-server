type Post implements Node {
  id: ID!
  _id: String!
  title: String!
  description: String
  authorId: String!
  author: User!
}

type Mutation {
  UserCreatePost(input: UserCreatePostInput!): UserCreatePostPayload
}

type Query {
  post(id: ID!): Post
  feed(first: Int, after: String, last: Int, before: String): PostConnection
}

input UserCreatePostInput {
  title: String!
  description: String
  clientMutationId: String
}

type UserCreatePostPayload {
  error: String
  post: Post
  clientMutationId: String
}

type PostConnection {
  count: Int!
  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int!

  """
  Offset from start
  """
  startCursorOffset: Int!

  """
  Offset till end
  """
  endCursorOffset: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfoExtended!

  """
  A list of edges.
  """
  edges: [PostEdge]!
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge
  """
  node: Post!

  """
  A cursor for use in pagination
  """
  cursor: String!
}
